FORMAT: 1A
HOST: https://school-time.co/app2/index.php/api

# SchoolTime

Integrate your app with SchoolTime. This unified API gives you access to SchoolTime, in a click, your customer can connect to SchoolTime from your app, and instantly access their SchoolTime data.

**What kind of applications can make use of SchoolTime API?**

If you have an application in any of these categories, you can tap into the extremely popular SchoolTime customer base and also provide your customers with single click relevant data exchange.

1. Education Technology Applications like Learning Management Systems, MOOC Content providers, and similar apps can pull student and teacher related information from SchoolTime to provide organised access and authentication inside their app. 
2. Payroll and HRIS Applications can pull staff data from SchoolTime to automatically populate their database and access to their application. Also includes Employee Time Tracking apps, Biometric Systems, project management tools and similar. 
3. Finance and Accounting applications can pull income details as well as dues from SchoolTime. This will help in reduction of overheads as all invoices can be populated into any accounting system from SchoolTime with a single click. 

##Requirements for apps using the SchoolTime API

SchoolTime API supports non-rich internet SaaS apps that users access with a web browser. Mobile extensions to these SaaS apps are also supported.

If you plan to integrate your app with SchoolTime, your app must:

* Be a web app available for use within a browser.
*  Pass the technical, security, and marketing reviews.



The API is organized around REST. All requests should be made over SSL. All request and response bodies, including errors, are encoded in JSON.This collection of API provides various methods to pull data from SchoolTime.

*Note*

    ST-API-KEY must be passed in the request header.
    Comma can be used in the paramenter (https://school-time.co/app2/index.php/api/students?id=9,2,10)
    
## Students [/students/{?id,board,class}] 

### GET [GET]

This retrieves the list of student data from your institute on SchoolTime. You can retrieve students by their ID, board, or class. One or more combinations of these parameters (id, board, class) can be passed to pull the data from SchoolTime. 

+ Request  (application/json)

    + Headers
    
            ST-API-KEY: StRest@123

+ Parameters
    + id (optional, number) ... Student ID  
    + board (optional, string) ... Name of the board / sub-school
    + class (optional, string) ... Name of the class belong to board/sub-school

+ Response 200 (application/json)

        {
            "id": "9",
            "name": "Kumar"
            "birthday": "23/06/2013"
            "sex": "male"
            "religion": ""
            "blood_group": ""
            "address": "Hyderabad"
            "phone": "9913456788"
            "email": "chandradas.lokesh@stplglobal.com"
            "nationality": null
            "board": "State Board"
            "class": "2"
            "section": "B"
        }
        
+ Response 403 (application/json)

        {
            "status": "false"
            "message": "Invalid API key"
        }

+ Response 404 (application/json)

        {
            "status": false
            "message": "data could not be found"
        }

### POST [POST]

You can use this method to pass the student data to SchoolTime (to create new student). Below values can be passed in the request body with JSON format.

    name (string)               : Student Name
    email (string)              : Email ID of the Student. this will be used to Login
    password (optional, string) : Password to login ST. If not provided the default password is Student@123
    roll (optinonal, string)    : Roll number of the student 
    board (optional, string)    : Name of the board / sub-school
    class (optional, string)    : Name of the class belong to board/sub-school
    section (optional, string)  : Section of the class
    birthday (optional, date)   : Date of birth, if not provided current date reduced with 3 years and stored accordingly
    sex (optional, string)      : Gender of the student, if not provided, "male" is default type
    address (optional, string)  : Address details in one line
    phone (optional, string)    : Phone number

Note : 
    Students created with API will be inactive by default. The admin user has to activate them.
    This API as of now accepting one student data per request. Batch optoin will be added soon.


+ Request  (application/json)

    + Headers
    
            ST-API-KEY: StRest@123

    + Body 

            {
                "name": "Roshan Kumar",
                "email":"chandradas.lokesh@stplglobal.com",
                "birthday": "23/Jan/2013",
                "sex": "male",
                "religion": "Hindu",
                "blood_group": "O Plus",
                "address": "Hyderabad",
                "phone": "9913456788",
                "nationality": "Indian",
                "board": "State Board",
                "class": "2",
                "section": "B"
            }
            

+ Response 201 (application/json)

        {
          "id": 616,
          "name": "Roshan Kumar",
          "email": "chandradas.lokesh@stplglobal.com",
          "message": "Added Student"
        }
        
+ Response 403 (application/json)

        {
            "status": "false"
            "message": "Invalid API key"
        }

+ Response 404 (application/json)

        {
            "status": false
            "message": "data could not be found"
        }
        
+ Response 400 (application/json)

        {
            "status": "false",
            "message": "Email Already Exists. Choose PUT if you want to update existing student"
        }

### PUT [PUT]

You can use this method to update existing the student data in SchoolTime. Below values can be passed in the request body with JSON format.

    id (int)                    : Unique ID of the student from ST
    name (optional, string)     : Student Name
    email (optional, string)    : Email ID of the Student. this will be used to Login
    password (optional, string) : Password to login ST
    roll (optinonal, string)    : Roll number of the student
    board (optional, string)    : Name of the board / sub-school
    class (optional, string)    : Name of the class belong to board/sub-school
    section (optional, string)  : Section of the class
    birthday (optional, date)   : Date of birth, if not provided current date reduced with 3 years and stored accordingly
    sex (optional, string)      : Gender of the student, if not provided, "male" is default type
    address (optional, string)  : Address details in one line
    phone (optional, string)    : Phone number

Note : 
    This API as of now accepting one student data per request. Batch optoin will be added soon.
    

+ Request  (application/json)

    + Headers
    
            ST-API-KEY: StRest@123

    + Body 

            {
                "id": 617,
                "name": "Roshan Kumar",
                "birthday": "23/06/2013",
                "sex": "male",
                "religion": "Hindu",
                "blood_group": "O-",
                "address": "Hyderabad",
                "phone": "9913456788",
                "email": "chandradas.lokesh@stplglobal.com",
                "nationality": null,
                "board": "State Board",
                "class": "2",
                "section": "B"
            }
            

+ Response 201 (application/json)

        {
          "id": 617,
          "message": "Student Updated"
        }
        
+ Response 403 (application/json)

        {
            "status": "false"
            "message": "Invalid API key"
        }

+ Response 404 (application/json)

        {
            "status": false
            "message": "data could not be found"
        }
        
+ Response 400 (application/json)

        {
            "status": "false",
            "message": "Email Already Exists. Choose PUT if you want to update existing student"
        }

## Admins [/admins/{?id}] 

### GET [GET]

This gets list of admin user data from your institute on SchoolTime. Comma separated *id* parameter can be passed to retrieve one ore more specific users data.

+ Request  (application/json)

    + Headers
    
            ST-API-KEY: StRest@123

+ Parameters
    + id (optional, number) ... Admin ID  
    
+ Response 200 (application/json) 

        {
            "name": "Lokesh"
            "qualification": "BTECH"
            "birthday": "11/08/1995"
            "doj": "11/02/2015"
            "sex": "male"
            "religion": ""
            "blood_group": "a+"
            "address": "test"
            "phone": "9000675658"
            "email": "lokeshdas251@gmail.com"
        }

+ Response 403 (application/json)

        {
            "status": "false"
            "message": "Invalid API key"
        }

+ Response 404 (application/json)

        {
            "status": false
            "message": "data could not be found"
        }


## Accountant [/accountant/{?id}] 

### GET [GET]

This gets list of accountant user data from your institute on SchoolTime. Comma separated *id* parameter can be passed to retrieve one ore more specific users data.

+ Request  (application/json)

    + Headers
    
            ST-API-KEY: StRest@123

+ Parameters
    + id (optional, number) ... Accountant ID  
    
+ Response 200 (application/json) 

        {
            "name": "Rama"
            "qualification": "MCom"
            "birthday": "07/13/1995"
            "doj": "09/11/2014"
            "sex": "male"
            "religion": ""
            "blood_group": "a+"
            "address": ""
            "phone": "9630258741"
            "email": "finance.user@school.com"
        }

+ Response 403 (application/json)

        {
            "status": "false"
            "message": "Invalid API key"
        }

+ Response 404 (application/json)

        {
            "status": false
            "message": "data could not be found"
        }
        
        
## Teachers [/teachers/{?id,department,designation}] 

### GET [GET]

This gets list of teaching/non-teaching user data from your institute on SchoolTime. 

Available parameters to use are *id*, *department*, and *designation*. Combination of one or more of thse can used. Comma can be applied to filter down.

+ Request  (application/json)

    + Headers
    
            ST-API-KEY: StRest@123

+ Parameters
    + id (optional, number) ... Staff ID
    + department (optional, string) ... Name of the department
    + designation (optional, string) ... Name of the designation / job title
    
+ Response 200 (application/json) 

        {
            "name": "Avinash dfg"
            "qualification": "B.TECH"
            "birthday": "07/04/1979"
            "doj": "03/26/2015"
            "sex": "male"
            "religion": ""
            "blood_group": ""
            "address": "Hyderabad"
            "phone": ""
            "email": "avinassgdfgh@school.com"
            "department": "Physics"
            "designation": "Professor"
            "previous_experience": null
        }
        
+ Response 403 (application/json)

        {
            "status": "false"
            "message": "Invalid API key"
        }

+ Response 404 (application/json)

        {
            "status": false
            "message": "data could not be found"
        }

### POST [POST]

This methods help you to create teacher data of your school in SchoolTime
   
    name  (string)     : Teacher Name
    email (string)    : Email ID of the Teacher. This will be used to Login
    password (optional, string) : Password to login ST
    birthday (optional, date)   : Date of birth, if not provided current date reduced with 3 years and stored accordingly
    joindate (optional, date)   : Date of joining, if not provided current date reduced with 1 year and stored accordingly
    sex (optional, string)      : Gender of the student, if not provided, "male" is default type
    address (optional, string)  : Address details in one line
    phone (optional, string)    : Phone number
    religion (optional, string) : Religion name
    blood_group(optional,string): Blood group of the teacher
    qualification(optional, string) : Qualification of the teacher
    experience (optional, string): Previous experince details of the teacher

Note : 
    This API as of now accepting one teacher data per request. Batch optoin will be added soon.


+ Request  (application/json)

    + Headers
    
            ST-API-KEY: StRest@123

    + Body
         
            {
                "name": "Anand Mohan Pal",
                "email": "anandmoham.pal@stplglobal.com",
                "qualification": "B.TECH",
                "birthday": "07/04/1989",
                "joindate": "03/26/2015",
                "sex": "male",
                "religion": "Hindu",
                "blood_group": "O+",
                "address": "Hyderabad",
                "phone": "+914065887875",
                "previous_experience": "NONE"
            } 

    
+ Response 201 (application/json) 

        {
          "id": 150,
          "name": "Anand Mohan Pal",
          "email": "anandmoham.pal@stplglobal.com",
          "message": "Added Teacher"
        }
        
+ Response 403 (application/json)

        {
            "status": "false"
            "message": "Invalid API key"
        }

+ Response 404 (application/json)

        {
            "status": false
            "message": "data could not be found"
        }

+ Response 400 (application/json)
 
        {
          "status": "false",
          "message": "Email Already Exists. Choose PUT if you want to update existing staff"
        }
        


### PUT [PUT]

This methods help you to create teacher data of your school in SchoolTime. Below values can be passed in JSON request body

    name  (string)     : Teacher Name
    email (string)    : Email ID of the Teacher. This will be used to Login
    password (optional, string) : Password to login ST
    birthday (optional, date)   : Date of birth, if not provided current date reduced with 3 years and stored accordingly
    joindate (optional, date)   : Date of joining, if not provided current date reduced with 1 year and stored accordingly
    sex (optional, string)      : Gender of the student, if not provided, "male" is default type
    address (optional, string)  : Address details in one line
    phone (optional, string)    : Phone number
    religion (optional, string) : Religion name
    blood_group(optional,string): Blood group of the teacher
    qualification(optional, string) : Qualification of the teacher
    experience (optional, string): Previous experince details of the teacher

Note : 
    This API as of now accepting one teacher data per request. Batch optoin will be added soon.
    

+ Request  (application/json)

    + Headers
    
            ST-API-KEY: StRest@123

    + Body
         
            {
                "id":150,
                "name": "Anand Mohan Pal",
                "email": "anandmoham.pal@stplglobal.com",
                "qualification": "MCA",
                "birthday": "07/07/1989",
                "joindate": "04/28/2015",
                "sex": "male",
                "religion": "Hindu",
                "blood_group": "O+",
                "address": "Hyderabad",
                "phone": "+914065887875",
                "previous_experience": "1 Years"
            } 

    
+ Response 200 (application/json) 

        {
          "id": 150,
          "message": "Teacher Updated"
        }
        
+ Response 403 (application/json)

        {
            "status": "false"
            "message": "Invalid API key"
        }

+ Response 404 (application/json)

        {
            "status": false
            "message": "data could not be found"
        }


## Collections [/collections/{?board,class}] 

### GET [GET]

This gets list of collections data from your institute on SchoolTime. i.e., the invoices that are paid by the parents will be listed in this.

Parameters allowed are *board*, *class*.

+ Request  (application/json)

    + Headers
    
            ST-API-KEY: StRest@123

+ Parameters
   
    + board (optional, string) ... Name of the board / school
    + class (optional, string) ... Name of the class
    
+ Response 200 (application/json) 

        {
            "invoice_code": "INV-1-19"
            "name": "Nanee"
            "board": "State Board"
            "class": "3"
            "section": "C"
            "total_amount": "6346.00"
            "payment_status": "Paid"
            "date_added": "2015-11-30 00:07:21"
            "due_date": "2015-12-25 00:00:00"
            "date_paid": "2015-11-30 12:00:00"
        }
        
+ Response 403 (application/json)

        {
            "status": "false"
            "message": "Invalid API key"
        }

+ Response 404 (application/json)

        {
            "status": false
            "message": "data could not be found"
        }

## Dues [/dues/{?board,class}] 

### GET [GET]

This gets list of outstanding collections data from your institute on SchoolTime. i.e., the invoices against the payment is not done.

Parameters allowed are *board*, *class*.

+ Request  (application/json)

    + Headers
    
            ST-API-KEY: StRest@123

+ Parameters
   
    + board (optional, string) ... Name of the board / school
    + class (optional, string) ... Name of the class
    
+ Response 200 (application/json) 

        {
            "invoice_code": "INV-2-9"
            "name": "Kumar"
            "board": "State Board"
            "class": "2"
            "section": "B"
            "total_amount": "3053.25"
            "payment_status": "Unpaid"
            "date_added": "2015-11-30 05:33:14"
            "due_date": "2015-12-30 00:00:00"
            "date_paid": null
        }
        
+ Response 403 (application/json)

        {
            "status": "false"
            "message": "Invalid API key"
        }

+ Response 404 (application/json)

        {
            "status": false
            "message": "data could not be found"
        }
        
## Expenses [/expenses/{?category,from,to}] 

### GET [GET]

This gets list of expense data from your institute on SchoolTime. 

Available parameters are *category*, *from*, and *to*

+ Request  (application/json)

    + Headers
    
            ST-API-KEY: StRest@123

+ Parameters
   
    + category (optional, string) ... Name of the expense category
    + from (optional, date) ... Starting date to apply
    + to (optional, date) ... Ending date to apply
    
+ Response 200 (application/json) 

        {
            "category": "Vehicle Maintenance"
            "title": "Vehicle Repair"
            "amount": "500"
            "method": "card"
            "date": "2015-08-05 00:00:00"
        }

+ Response 403 (application/json)

        {
            "status": "false"
            "message": "Invalid API key"
        }

+ Response 404 (application/json)

        {
            "status": false
            "message": "data could not be found"
        }

## Boards [/boards/{?board}] 

### GET [GET]

This gets list of boards/branch data from your institute on SchoolTime. 

+ Request  (application/json)

    + Headers
    
            ST-API-KEY: StRest@123

+ Parameters
   
    + board (optional, string) ... Name of the board / branch
    
    
+ Response 200 (application/json) 

        [
          {
            "id": "1",
            "name": "State Board",
            "description": "State Board System"
          },
          {
            "id": "2",
            "name": "CBSE",
            "description": "CBSE Board"
          }
        ]

+ Response 403 (application/json)

        {
            "status": "false"
            "message": "Invalid API key"
        }

+ Response 404 (application/json)

        {
            "status": false
            "message": "data could not be found"
        }
        
### POST [POST]

This allows you to add a new board/branch data to SchoolTime
    
    name (string)                   : Name of the board / school branch
    description (optinoal, string)  : Comments about the board

+ Request  (application/json)

    + Headers
    
            ST-API-KEY: StRest@123

    + Body

            {
                "name": "api test board",
                "description" : "this board name added via api call"
            }
    
    
+ Response 201 (application/json) 

        {
          "id": 14,
          "name": "api test board",
          "description": "this board name added via api call",
          "message": "Added Board"
        }

+ Response 403 (application/json)

        {
            "status": "false"
            "message": "Invalid API key"
        }

+ Response 404 (application/json)

        {
            "status": false
            "message": "data could not be found"
        }        
        
+ Response 400 (application/json)        

        {
          "status": "false",
          "message": "Board name already exists"
        }
        
### PUT [PUT]

This allows you to update the existing board/branch data on SchoolTime. 
    
    id (int)                        : Board ID as per SchoolTime
    name (string)                   : Name of the board / school branch
    description (optinoal, string)  : Comments about the board

+ Request  (application/json)

    + Headers
    
            ST-API-KEY: StRest@123

    + Body

            {
                 "id": 14,
                "name": "api board name update",
                "description" : "this board name updated via api call"
            }
    
    
+ Response 200 (application/json) 

        {
          "id": 14,
          "message": "Updated Board"
        }

+ Response 403 (application/json)

        {
            "status": "false"
            "message": "Invalid API key"
        }

+ Response 404 (application/json)

        {
            "status": false
            "message": "data could not be found"
        }        
        
## Class [/class/{?board,class}] 

### GET [GET]

This gets list of classes/batches for the boards/branch from your institute on SchoolTime. 

+ Request  (application/json)

    + Headers
    
            ST-API-KEY: StRest@123

+ Parameters
   
    + board (optional, string) ... Name of the board/branch
    + class (optional, string) ... Name of the class
    
    
+ Response 200 (application/json) 

        [
          {
            "id": "1",
            "class": "1",
            "board": "State Board"
          },
          {
            "id": "2",
            "class": "2",
            "board": "State Board"
          }
        ]

+ Response 403 (application/json)

        {
            "status": "false"
            "message": "Invalid API key"
        }

+ Response 404 (application/json)

        {
            "status": false
            "message": "data could not be found"
        }
        
### POST [POST]

This allows you to add a new board/branch data to SchoolTime
    
    name (string)   : Name of the class / batch
    board (string)  : Name of the board / school branch

+ Request  (application/json)

    + Headers
    
            ST-API-KEY: StRest@123

    + Body

            {
                "name": "api batch",
                "board": "api board name update"
            }
    
    
+ Response 201 (application/json) 

        {
          "id": 18,
          "name": "api batch",
          "board": "api board name update",
          "message": "Added Class"
        }

+ Response 403 (application/json)

        {
            "status": "false"
            "message": "Invalid API key"
        }

+ Response 404 (application/json)

        {
            "status": false
            "message": "data could not be found"
        }        
        
+ Response 400 (application/json)        

        {
          "status": "false",
          "message": "Class name already exists in this board"
        }
        
### PUT [PUT]

This allows you to update the existing board/branch data on SchoolTime. 
    
    id (int)        : Class ID as per SchoolTime
    name (string)   : Name of the class / batch
    board (string)  : Name of the board / school branch

+ Request  (application/json)

    + Headers
    
            ST-API-KEY: StRest@123

    + Body

            {
                "id": 18,
                "name": "api batch update",
                "board": "State Board"
            }
    
    
+ Response 200 (application/json) 

        {
          "id": 18,
          "message": "Class Updated"
        P}

+ Response 403 (application/json)

        {
            "status": "false"
            "message": "Invalid API key"
        }

+ Response 404 (application/json)

        {
            "status": false
            "message": "data could not be found"
        }